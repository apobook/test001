<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>test</groupId>
  <artifactId>test001</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <properties>
		<!-- 
			自己配置改变jdk的版本使用：
			<maven.compiler.source>1.8</maven.compiler.source>//java源文件的jdk版本
			<maven.compiler.target>1.8</maven.compiler.target>//编译生成的class文件的jdk版本（以此为主）
			<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>//编译器版本
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>//项目使用的字符集
		 	<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>//项目输出时采用的字符集
		 -->
		 <!-- 采用了springboot后字符集已经在父pom文件中定义了，而在springboot中改变jdk的版本使用<java.servion>，原理同上 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
  <build>
  	<plugins>
  		<plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.2</version>
        <configuration>
        	<!-- 配置可以没有web.xml文件，我们可以采用servlet3.0的规范使用ServletContainerInitializer接口来替换web.xml的功能 -->
        	<failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
        <executions>
          <execution>
            <id>default-war</id>
            <phase>package</phase>
            <goals>
              <goal>war</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
  	</plugins>
  </build>
</project>